{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quaternion Module The QuaternionModule script allows you to work with quaternions more easily, without needing to create your own module for it. This documentation contains information on how to use the module script to create your own quaternions and work with them, as well as information on all available functions you can use. Getting started To get started, you will need to require() the module script. This documentation assumes you have placed the QuaternionModule into the ReplicatedStorage . -- Get the ReplicatedStorage service local sRepStorage = game : GetService ( \"ReplicatedStorage\" ); -- Require the quaternion module local qtModule = require ( sRepStorage . QuaternionModule ); Once you have require() d the module, you can then use it to create quaternions. To get started, see this page .","title":"Home"},{"location":"#quaternion-module","text":"The QuaternionModule script allows you to work with quaternions more easily, without needing to create your own module for it. This documentation contains information on how to use the module script to create your own quaternions and work with them, as well as information on all available functions you can use.","title":"Quaternion Module"},{"location":"#getting-started","text":"To get started, you will need to require() the module script. This documentation assumes you have placed the QuaternionModule into the ReplicatedStorage . -- Get the ReplicatedStorage service local sRepStorage = game : GetService ( \"ReplicatedStorage\" ); -- Require the quaternion module local qtModule = require ( sRepStorage . QuaternionModule ); Once you have require() d the module, you can then use it to create quaternions. To get started, see this page .","title":"Getting started"},{"location":"about/","text":"About Quaternion module written by TheCSDev . Sources This module was written with the help of the following sources: Microsoft referencesource - System.Numerics.Quaternion.cs https://gist.github.com/EgoMoose/7a8f4d7b00ffe45abce8ade72b173284 Wikipedia - Conversion between quaternions and Euler angles Roblox Developer Wiki - CFrame","title":"About"},{"location":"about/#about","text":"Quaternion module written by TheCSDev .","title":"About"},{"location":"about/#sources","text":"This module was written with the help of the following sources: Microsoft referencesource - System.Numerics.Quaternion.cs https://gist.github.com/EgoMoose/7a8f4d7b00ffe45abce8ade72b173284 Wikipedia - Conversion between quaternions and Euler angles Roblox Developer Wiki - CFrame","title":"Sources"},{"location":"api_quaternion/","text":"A table that represents a quaternion. Note Please keep in mind that whenever you see the Quaternion type mentioned, it is actually referring to a table . For example, ToString(self : Quaternion) is actually ToString(self : table) because quaternions are just regular tables. In other words, do not use type(quaternion) == 'Quaternion' , instead use type(quaternion) == 'table' . Fields W : number Type: number Default value: 1 The W value of the quaternion X : number Type: number Default value: 0 The X value of the quaternion Y : number Type: number Default value: 0 The Y value of the quaternion Z : number Type: number Default value: 0 The Z value of the quaternion Functions General functions new(w : number?, x : number?, y : number?, z : number?) : Quaternion Returns: table (Quaternion) Creates a new quaternion. This isn't the intended way of creating quaternions, but it can be done this way as well. This constructor was included here in quaternions as well for technical reasons. Clone(self : Quaternion) : Quaternion Returns: table (Quaternion) Clones the given quaternion and returns the copy. ToString(self : Quaternion) : string Returns: string Returns an WXYZ string representation of the quaternion. Example: 1,0,0,0 Conversion functions ToCFrame(self : Quaternion, position : Vector3?) : CFrame Returns: CFrame Converts the quaternion to a CFrame, and then returns the CFrame. The position argument is optional. It's default value is Vector3.new(). ToEulerRadians(self : Quaternion) : Vector3 Returns: Vector3 Converts the quaternion to an Euler angle Vector3, in radians. ToEulerDegrees(self : Quaternion) : Vector3 Returns: Vector3 Converts the quaternion to an Euler angle Vector3, in degrees. Math functions (returns number) Length(self : Quaternion) : number Returns: number Calculates the length of the Quaternion. LengthSquared(self : Quaternion) : number Returns: number Calculates the length squared of the Quaternion. Dot(self : Quaternion, quaternionB : Quaternion) : number Returns: number Calculates the dot product of this and a given Quaternion. Math functions (returns self) Warning Keep in mind that using these functions directly affect the quaternion. If you wish to apply a change to a separate quaternion, please use the Clone() function. For exapmle: local qtNormalized = quaternion:Clone():Normalize(); . Normalize(self : Quaternion) : Quaternion Returns: self Divides each component of the Quaternion by the length of the Quaternion. Conjugate(self : Quaternion) : Quaternion Returns: self Conjugates the quaternion. Inverse(self : Quaternion) : Quaternion Returns: self Inverses the quaternion. Concatenate(self : Quaternion, quaternionB : Quaternion) : Quaternion Returns: self Concatenates the quaternion. Lerp(self : Quaternion, quaternionB : Quaternion, amount : number) : Quaternion Returns: self Linearly interpolates between this and a given quaternion. Slerp(self : Quaternion, quaternionB : Quaternion, amount : number) : Quaternion Returns: self Interpolates between this and a given quaternion, using spherical linear interpolation.","title":"Quaternion"},{"location":"api_quaternion/#fields","text":"W : number Type: number Default value: 1 The W value of the quaternion X : number Type: number Default value: 0 The X value of the quaternion Y : number Type: number Default value: 0 The Y value of the quaternion Z : number Type: number Default value: 0 The Z value of the quaternion","title":"Fields"},{"location":"api_quaternion/#functions","text":"","title":"Functions"},{"location":"api_quaternion/#general-functions","text":"new(w : number?, x : number?, y : number?, z : number?) : Quaternion Returns: table (Quaternion) Creates a new quaternion. This isn't the intended way of creating quaternions, but it can be done this way as well. This constructor was included here in quaternions as well for technical reasons. Clone(self : Quaternion) : Quaternion Returns: table (Quaternion) Clones the given quaternion and returns the copy. ToString(self : Quaternion) : string Returns: string Returns an WXYZ string representation of the quaternion. Example: 1,0,0,0","title":"General functions"},{"location":"api_quaternion/#conversion-functions","text":"ToCFrame(self : Quaternion, position : Vector3?) : CFrame Returns: CFrame Converts the quaternion to a CFrame, and then returns the CFrame. The position argument is optional. It's default value is Vector3.new(). ToEulerRadians(self : Quaternion) : Vector3 Returns: Vector3 Converts the quaternion to an Euler angle Vector3, in radians. ToEulerDegrees(self : Quaternion) : Vector3 Returns: Vector3 Converts the quaternion to an Euler angle Vector3, in degrees.","title":"Conversion functions"},{"location":"api_quaternion/#math-functions-returns-number","text":"Length(self : Quaternion) : number Returns: number Calculates the length of the Quaternion. LengthSquared(self : Quaternion) : number Returns: number Calculates the length squared of the Quaternion. Dot(self : Quaternion, quaternionB : Quaternion) : number Returns: number Calculates the dot product of this and a given Quaternion.","title":"Math functions (returns number)"},{"location":"api_quaternion/#math-functions-returns-self","text":"Warning Keep in mind that using these functions directly affect the quaternion. If you wish to apply a change to a separate quaternion, please use the Clone() function. For exapmle: local qtNormalized = quaternion:Clone():Normalize(); . Normalize(self : Quaternion) : Quaternion Returns: self Divides each component of the Quaternion by the length of the Quaternion. Conjugate(self : Quaternion) : Quaternion Returns: self Conjugates the quaternion. Inverse(self : Quaternion) : Quaternion Returns: self Inverses the quaternion. Concatenate(self : Quaternion, quaternionB : Quaternion) : Quaternion Returns: self Concatenates the quaternion. Lerp(self : Quaternion, quaternionB : Quaternion, amount : number) : Quaternion Returns: self Linearly interpolates between this and a given quaternion. Slerp(self : Quaternion, quaternionB : Quaternion, amount : number) : Quaternion Returns: self Interpolates between this and a given quaternion, using spherical linear interpolation.","title":"Math functions (returns self)"},{"location":"api_quaternionfunctions/","text":"QuaternionFunctions A module containing all functions that are part of created quaternions. This module is mainly used by the QuaternionModule to create quaternions. You do not need to require() this module yourself. Functions For the list of functions available in this module, please see Quaternion .","title":"QuaternionFunctions"},{"location":"api_quaternionfunctions/#quaternionfunctions","text":"A module containing all functions that are part of created quaternions. This module is mainly used by the QuaternionModule to create quaternions. You do not need to require() this module yourself.","title":"QuaternionFunctions"},{"location":"api_quaternionfunctions/#functions","text":"For the list of functions available in this module, please see Quaternion .","title":"Functions"},{"location":"api_quaternionmodule/","text":"QuaternionModule The main quaternion module. This module is used for creation of quaternions. Note Please keep in mind that whenever you see the Quaternion type mentioned, it is actually referring to a table . For example, ToString(self : Quaternion) is actually ToString(self : table) because quaternions are just regular tables. In other words, do not use type(quaternion) == 'Quaternion' , instead use type(quaternion) == 'table' . Constructors new(w : number?, x : number?, y : number?, z : number?) : Quaternion Returns: table (Quaternion) Creates a new quaternion. The arguments are optional. fromCFrame(arg0 : CFrame) : Quaternion Returns: table (Quaternion) Creates a new quaternion from a CFrame. fromEulerRadA(roll : number, pitch : number, yaw : number) : Quaternion Returns: table (Quaternion) Creates a new quaternion from XYZ Euler angles in radians. fromEulerRadB(arg0 : Vector3) : Quaternion Returns: table (Quaternion) Creates a new quaternion from Vector3 Euler angles in radians. fromEulerDegA(roll : number, pitch : number, yaw : number) : Quaternion Returns: table (Quaternion) Creates a new quaternion from XYZ Euler angles in degrees. fromEulerDegB(arg0 : Vector3) : Quaternion Returns: table (Quaternion) Creates a new quaternion from Vector3 Euler angles in degrees. Functions Lerp(qt1 : Quaternion, qt2 : Quaternion, amount : number) : Quaternion Returns: table (Quaternion) Linearly interpolates between two given quaternions. Returns a new quaternion, without affecting any given quaternions. Slerp(qt1 : Quaternion, qt2 : Quaternion, amount : number) : Quaternion Returns: table (Quaternion) Interpolates between two given quaternions, using spherical linear interpolation. Returns a new quaternion, without affecting any given quaternions.","title":"QuaternionModule"},{"location":"api_quaternionmodule/#quaternionmodule","text":"The main quaternion module. This module is used for creation of quaternions. Note Please keep in mind that whenever you see the Quaternion type mentioned, it is actually referring to a table . For example, ToString(self : Quaternion) is actually ToString(self : table) because quaternions are just regular tables. In other words, do not use type(quaternion) == 'Quaternion' , instead use type(quaternion) == 'table' .","title":"QuaternionModule"},{"location":"api_quaternionmodule/#constructors","text":"new(w : number?, x : number?, y : number?, z : number?) : Quaternion Returns: table (Quaternion) Creates a new quaternion. The arguments are optional. fromCFrame(arg0 : CFrame) : Quaternion Returns: table (Quaternion) Creates a new quaternion from a CFrame. fromEulerRadA(roll : number, pitch : number, yaw : number) : Quaternion Returns: table (Quaternion) Creates a new quaternion from XYZ Euler angles in radians. fromEulerRadB(arg0 : Vector3) : Quaternion Returns: table (Quaternion) Creates a new quaternion from Vector3 Euler angles in radians. fromEulerDegA(roll : number, pitch : number, yaw : number) : Quaternion Returns: table (Quaternion) Creates a new quaternion from XYZ Euler angles in degrees. fromEulerDegB(arg0 : Vector3) : Quaternion Returns: table (Quaternion) Creates a new quaternion from Vector3 Euler angles in degrees.","title":"Constructors"},{"location":"api_quaternionmodule/#functions","text":"Lerp(qt1 : Quaternion, qt2 : Quaternion, amount : number) : Quaternion Returns: table (Quaternion) Linearly interpolates between two given quaternions. Returns a new quaternion, without affecting any given quaternions. Slerp(qt1 : Quaternion, qt2 : Quaternion, amount : number) : Quaternion Returns: table (Quaternion) Interpolates between two given quaternions, using spherical linear interpolation. Returns a new quaternion, without affecting any given quaternions.","title":"Functions"},{"location":"api_quaternionoperators/","text":"QuaternionOperators This module is used by the quaternion metatable to allow for use of mathematical operators on quaternions. You do not need to requre() this module in order to perform mathematical operations on quaternions. Note Keep in mind that unlike in Quaternion s, using these functions will not directly affect the quaternions that have been passed as arguments. All functions here return a separate quaternion copy. Functions NegateQ(qt : Quaternion) : Quaternion Returns: table (Quaternion) Returns a negated copy of a given quaternion. AddQQ(qt1 : Quaternion, qt2 : Quaternion) : Quaternion Returns: table (Quaternion) Adds two quaternions. SubtractQQ(qt1 : Quaternion, qt2 : Quaternion) : Quaternion Returns: table (Quaternion) Subtracts two quaternions. MultiplyQQ(qt1 : Quaternion, qt2 : Quaternion) : Quaternion Returns: table (Quaternion) Multiplies two quaternions. MultiplyQN(qt : Quaternion, num : number) : Quaternion Returns: table (Quaternion) Multiplies a quaternion with a number. DivideQQ(qt1 : Quaternion, qt2 : Quaternion) : Quaternion Returns: table (Quaternion) Divides two quaternions. DivideQN(qt : Quaternion, num : number) : Quaternion Returns: table (Quaternion) Divides a quaternion by a number. Please avoid dividing by zero.","title":"QuaternionOperators"},{"location":"api_quaternionoperators/#quaternionoperators","text":"This module is used by the quaternion metatable to allow for use of mathematical operators on quaternions. You do not need to requre() this module in order to perform mathematical operations on quaternions. Note Keep in mind that unlike in Quaternion s, using these functions will not directly affect the quaternions that have been passed as arguments. All functions here return a separate quaternion copy.","title":"QuaternionOperators"},{"location":"api_quaternionoperators/#functions","text":"NegateQ(qt : Quaternion) : Quaternion Returns: table (Quaternion) Returns a negated copy of a given quaternion. AddQQ(qt1 : Quaternion, qt2 : Quaternion) : Quaternion Returns: table (Quaternion) Adds two quaternions. SubtractQQ(qt1 : Quaternion, qt2 : Quaternion) : Quaternion Returns: table (Quaternion) Subtracts two quaternions. MultiplyQQ(qt1 : Quaternion, qt2 : Quaternion) : Quaternion Returns: table (Quaternion) Multiplies two quaternions. MultiplyQN(qt : Quaternion, num : number) : Quaternion Returns: table (Quaternion) Multiplies a quaternion with a number. DivideQQ(qt1 : Quaternion, qt2 : Quaternion) : Quaternion Returns: table (Quaternion) Divides two quaternions. DivideQN(qt : Quaternion, num : number) : Quaternion Returns: table (Quaternion) Divides a quaternion by a number. Please avoid dividing by zero.","title":"Functions"},{"location":"guide_creating/","text":"Creating a quaternion There are several ways you can create a quaternion. The simplest one being QuaternionModule.new() . Below is an example of how to create a quaternion: -- Get the ReplicatedStorage service local sRepStorage = game : GetService ( \"ReplicatedStorage\" ); -- Require the quaternion module local qtModule = require ( sRepStorage . QuaternionModule ); -- Create a new identity Quaternion local quaternion = qtModule . new (); -- WXYZ arguments are also supported quaternion = qtModule . new ( 1 , 0 , 0 , 0 ); Tip QuaternionModule.new() uses the WXYZ parameter order, so make sure the W argument always goes first. Converting to a quaternion You can also convert Euler angles (both degrees and radians) as well as CFrame-s into quaternions, and vice versa. Below is a list of ways you can do that. Tip Keep in mind that converting from Euler angles to Quaternion uses the XYZ order. From Euler angles in degrees -- For converting XYZ, use qtModule.fromEulerDegA() local quaternionA = qtModule . fromEulerDegA ( 45 , 90 , 0 ); -- For converting a Vector3, use qtModule.fromEulerDegB() local quaternionB = qtModule . fromEulerDegB ( Vector3 . new ( 45 , 90 , 0 )); From Euler angles in radians -- For converting XYZ, use qtModule.fromEulerRadA() local quaternionA = qtModule . fromEulerRadA ( 0.785398 , 1.5708 , 0 ); -- For converting a Vector3, use qtModule.fromEulerRadB() local quaternionB = qtModule . fromEulerRadB ( Vector3 . new ( 0.785398 , 1.5708 , 0 )); From CFrame local quaternion = qtModule . fromCFrame ( CFrame . new ()); Converting from a quaternion You can also convert a quaternion back into a CFrame or an Euler angle. Below is a list of ways you can do that. Tip Keep in mind that converting from Quaternion to Euler angles uses the XYZ order. To Euler angles in degrees local quaternion = qtModule . new (); local vector3InDegrees = quaternion : ToEulerDegrees (); To Euler angles in radians local quaternion = qtModule . new (); local vector3InRadians = quaternion : ToEulerRadians (); To CFrame local quaternion = qtModule . new (); local cframe = quaternion : ToCFrame (); local cframeWPos = quaternion : ToCFrame ( Vector3 . new ( 0 , 10 , 0 )); -- With position To string local quaternion = qtModule . new (); local str = quaternion : ToString (); -- Result: \"1,0,0,0\" Notice Creating a quaternion returns a table containing the WXYZ fields, as well as functions related to quaternions. For more info, please see this page . To begin working with quaternions, and performing mathematical operations, see this page .","title":"Creating and converting"},{"location":"guide_creating/#creating-a-quaternion","text":"There are several ways you can create a quaternion. The simplest one being QuaternionModule.new() . Below is an example of how to create a quaternion: -- Get the ReplicatedStorage service local sRepStorage = game : GetService ( \"ReplicatedStorage\" ); -- Require the quaternion module local qtModule = require ( sRepStorage . QuaternionModule ); -- Create a new identity Quaternion local quaternion = qtModule . new (); -- WXYZ arguments are also supported quaternion = qtModule . new ( 1 , 0 , 0 , 0 ); Tip QuaternionModule.new() uses the WXYZ parameter order, so make sure the W argument always goes first.","title":"Creating a quaternion"},{"location":"guide_creating/#converting-to-a-quaternion","text":"You can also convert Euler angles (both degrees and radians) as well as CFrame-s into quaternions, and vice versa. Below is a list of ways you can do that. Tip Keep in mind that converting from Euler angles to Quaternion uses the XYZ order.","title":"Converting to a quaternion"},{"location":"guide_creating/#from-euler-angles-in-degrees","text":"-- For converting XYZ, use qtModule.fromEulerDegA() local quaternionA = qtModule . fromEulerDegA ( 45 , 90 , 0 ); -- For converting a Vector3, use qtModule.fromEulerDegB() local quaternionB = qtModule . fromEulerDegB ( Vector3 . new ( 45 , 90 , 0 ));","title":"From Euler angles in degrees"},{"location":"guide_creating/#from-euler-angles-in-radians","text":"-- For converting XYZ, use qtModule.fromEulerRadA() local quaternionA = qtModule . fromEulerRadA ( 0.785398 , 1.5708 , 0 ); -- For converting a Vector3, use qtModule.fromEulerRadB() local quaternionB = qtModule . fromEulerRadB ( Vector3 . new ( 0.785398 , 1.5708 , 0 ));","title":"From Euler angles in radians"},{"location":"guide_creating/#from-cframe","text":"local quaternion = qtModule . fromCFrame ( CFrame . new ());","title":"From CFrame"},{"location":"guide_creating/#converting-from-a-quaternion","text":"You can also convert a quaternion back into a CFrame or an Euler angle. Below is a list of ways you can do that. Tip Keep in mind that converting from Quaternion to Euler angles uses the XYZ order.","title":"Converting from a quaternion"},{"location":"guide_creating/#to-euler-angles-in-degrees","text":"local quaternion = qtModule . new (); local vector3InDegrees = quaternion : ToEulerDegrees ();","title":"To Euler angles in degrees"},{"location":"guide_creating/#to-euler-angles-in-radians","text":"local quaternion = qtModule . new (); local vector3InRadians = quaternion : ToEulerRadians ();","title":"To Euler angles in radians"},{"location":"guide_creating/#to-cframe","text":"local quaternion = qtModule . new (); local cframe = quaternion : ToCFrame (); local cframeWPos = quaternion : ToCFrame ( Vector3 . new ( 0 , 10 , 0 )); -- With position","title":"To CFrame"},{"location":"guide_creating/#to-string","text":"local quaternion = qtModule . new (); local str = quaternion : ToString (); -- Result: \"1,0,0,0\"","title":"To string"},{"location":"guide_creating/#notice","text":"Creating a quaternion returns a table containing the WXYZ fields, as well as functions related to quaternions. For more info, please see this page . To begin working with quaternions, and performing mathematical operations, see this page .","title":"Notice"},{"location":"guide_math/","text":"Math operations In terms of operators, quaternions support addition, subtraction, multiplication with numbers and quaternions, division with numbers and quaternions, as well as the unary minus operator (-value). Quaternions also offer other math related functions such as Length() , LengthSquared() , Dot() and so on. More info can be found here . Operators Unary minus Returns a new negated quaternion of the given quaternion. local quaternion = qtModule . new (); local qtNegated = - quaternion ; Addition Returns a new quaternion with the two given quaternions added together. local quaternionA = qtModule . new (); local quaternionB = qtModule . new (); local qtSum = quaternionA + quaternionB ; Subtraction Returns a new quaternion with the two given quaternions subtracted. local quaternionA = qtModule . new (); local quaternionB = qtModule . new (); local qtDifference = quaternionA - quaternionB ; Multiplication Returns a new quaternion with the two given quaternions multiplied. local quaternionA = qtModule . new (); local quaternionB = qtModule . new (); local qtProductA = quaternionA * quaternionB ; local qtProductB = quaternionA * 2 ; -- Numbers are also supported Division Returns a new quaternion with the two given quaternions multiplied. local quaternionA = qtModule . new (); local quaternionB = qtModule . new (); local qtQuotientA = quaternionA / quaternionB ; local qtQuotientB = quaternionA / 2 ; -- Numbers are also supported -- Try to avoid dividing by zero. Weird things can happen. Functions Quaternions also feature some math related functions to help you work with them. For a full list of all functions, please see this page . Warning Keep in mind that using those functions directly affect the quaternion. If you wish to apply a change to a separate quaternion, please use the Clone() function. For exapmle: local qtNormalized = quaternion:Clone():Normalize(); . Below are some of the functions -- Create a new quaternion local qt = qtModule . new (); -- Functions that return numbers local qtLength = qt : Length (); -- less performant local qtLengthSquared = qt : LengthSquared (); -- more performant -- Functions that return quaternions local qtNormalized = qt : Clone (): Normalize (); local qtConjugated = qt : Clone (): Conjugate (); local qtInversed = qt : Clone (): Inverse (); local qtConcatenated = qt : Clone (): Concatenate ( qtModule . new ());","title":"Math operations"},{"location":"guide_math/#math-operations","text":"In terms of operators, quaternions support addition, subtraction, multiplication with numbers and quaternions, division with numbers and quaternions, as well as the unary minus operator (-value). Quaternions also offer other math related functions such as Length() , LengthSquared() , Dot() and so on. More info can be found here .","title":"Math operations"},{"location":"guide_math/#operators","text":"","title":"Operators"},{"location":"guide_math/#unary-minus","text":"Returns a new negated quaternion of the given quaternion. local quaternion = qtModule . new (); local qtNegated = - quaternion ;","title":"Unary minus"},{"location":"guide_math/#addition","text":"Returns a new quaternion with the two given quaternions added together. local quaternionA = qtModule . new (); local quaternionB = qtModule . new (); local qtSum = quaternionA + quaternionB ;","title":"Addition"},{"location":"guide_math/#subtraction","text":"Returns a new quaternion with the two given quaternions subtracted. local quaternionA = qtModule . new (); local quaternionB = qtModule . new (); local qtDifference = quaternionA - quaternionB ;","title":"Subtraction"},{"location":"guide_math/#multiplication","text":"Returns a new quaternion with the two given quaternions multiplied. local quaternionA = qtModule . new (); local quaternionB = qtModule . new (); local qtProductA = quaternionA * quaternionB ; local qtProductB = quaternionA * 2 ; -- Numbers are also supported","title":"Multiplication"},{"location":"guide_math/#division","text":"Returns a new quaternion with the two given quaternions multiplied. local quaternionA = qtModule . new (); local quaternionB = qtModule . new (); local qtQuotientA = quaternionA / quaternionB ; local qtQuotientB = quaternionA / 2 ; -- Numbers are also supported -- Try to avoid dividing by zero. Weird things can happen.","title":"Division"},{"location":"guide_math/#functions","text":"Quaternions also feature some math related functions to help you work with them. For a full list of all functions, please see this page . Warning Keep in mind that using those functions directly affect the quaternion. If you wish to apply a change to a separate quaternion, please use the Clone() function. For exapmle: local qtNormalized = quaternion:Clone():Normalize(); . Below are some of the functions -- Create a new quaternion local qt = qtModule . new (); -- Functions that return numbers local qtLength = qt : Length (); -- less performant local qtLengthSquared = qt : LengthSquared (); -- more performant -- Functions that return quaternions local qtNormalized = qt : Clone (): Normalize (); local qtConjugated = qt : Clone (): Conjugate (); local qtInversed = qt : Clone (): Inverse (); local qtConcatenated = qt : Clone (): Concatenate ( qtModule . new ());","title":"Functions"}]}